#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Fish {
    float3 position;
    float3 direction;

    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    int numFlockmates;
};

RWStructuredBuffer<Fish> fishes;
int numFishes;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (uint indexB = 0; indexB < numFishes; indexB ++) {
        if (id.x != indexB) {
            Fish fishB = fishes[indexB];
            float3 offset = fishB.position - fishes[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (sqrDst < viewRadius * viewRadius) {
                fishes[id.x].numFlockmates += 1;
                fishes[id.x].flockHeading += fishB.direction;
                fishes[id.x].flockCentre += fishB.position;

                if (sqrDst < avoidRadius * avoidRadius) {
                    fishes[id.x].separationHeading -= offset / sqrDst;
                }
            }
        }
    }
}